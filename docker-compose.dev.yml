services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile

    depends_on:
      - postgres
      - sub-chart
      - sub-audio
      - sub-image
    volumes:
      - ./.env:/app/.env
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile

    volumes:
      - ./.env:/app/.env
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 30s
      timeout: 10s
      retries: 5

  sub-chart:
    build:
      context: .
      dockerfile: ./sub-chart/Dockerfile

    volumes:
      - ./.env:/app/.env
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3201"]
      interval: 30s
      timeout: 10s
      retries: 5

  sub-audio:
    build:
      context: .
      dockerfile: ./sub-audio/Dockerfile
    volumes:
      - ./.env:/app/.env
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3202"]
      interval: 30s
      timeout: 10s
      retries: 5

  sub-image:
    build:
      context: .
      dockerfile: ./sub-image/Dockerfile

    volumes:
      - ./.env:/app/.env
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3203"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:latest
    ports:
      - "10401:80"
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./backend/public:/app/backend-public
      - ./backend/assets:/app/backend-assets
    profiles:
      - prod

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    profiles:
      - prod
      - dev
      - test
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - "./data/redis:/data"
    profiles:
      - prod
      - dev
      - test
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: ["server", "/data", "--console-address", ":9001"]
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "./data/minio:/data"
    environment:
      MINIO_ROOT_USER: "${S3_USER}"
      MINIO_ROOT_PASSWORD: "${S3_PASSWORD}"
    profiles:
      - dev
      - test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: sh
    command: |
      -c '
      mc config host add minio http://minio:9000 ${S3_USER} ${S3_PASSWORD} &&
      mc mb minio/${S3_BUCKET} &&
      mc policy set public minio/${S3_BUCKET}
      '
    profiles:
      - "init"
      - test
    environment:
      S3_USER: "${S3_USER}"
      S3_PASSWORD: "${S3_PASSWORD}"
      S3_BUCKET: "${S3_BUCKET}"
